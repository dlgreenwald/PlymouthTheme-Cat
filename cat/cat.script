
# ----------------------------- Configuration ---------------------------------
// Font for boot message
MAIN_FONT = "NotoSans Bold 22";

// Font for password prompt
SECONDARY_FONT = "NotoSans Regular 16";

// Position of the animation in percentage of the screen dimensions
LOGO.center.x = 0.5;
LOGO.center.y = 0.5;

// Position of the boot message in percentage of the screen dimensions
BOOT_MESSAGE.center.x = 0.5;
BOOT_MESSAGE.center.y = 0.65;

// Position of the progress bar in percentage of the screen dimensions
BAR.center.x = 0.5;
BAR.center.y = 0.7;

// Position of the status message in percentage of the screen dimensions
STATUS.center.x = 0.5;
STATUS.center.y = 0.75;

// Position of the lock icon in percentage of the screen dimensions
LOCK.center.x = 0.5;
LOCK.center.y = 0.5;

// Position of the password prompt in percentage of the screen dimensions
PROMPT.center.x = 0.5;
PROMPT.center.y = 0.65;

// Placeholder in password prompt
PROMPT.placeholder = "Password";

// Character used to obfuscate password
PROMPT.bullet = "*";

# ------------------------------ Initialization -------------------------------
// Get screen dimensions
screen.width = Window.GetWidth();
screen.height = Window.GetHeight();
screen.half.width = Window.GetWidth(0) / 2;
screen.half.height = Window.GetHeight(0) / 2;

// set background to #161616
Window.SetBackgroundTopColor (0.08627450980392157, 0.08627450980392157, 0.08627450980392157);
Window.SetBackgroundBottomColor (0.08627450980392157, 0.08627450980392157, 0.08627450980392157);

mode = Plymouth.GetMode();
#b_debug.sprite.SetImage(Image.Text(mode, 1,1,0));

if (mode == "boot" ||
    mode == "resume" ||
    mode == "updates" ||
    mode == "system-upgrade" ||
    mode == "firmware-upgrade"){
    animation.current_frame = WAKEUP_PRE_START;
animation.loop_start = WAKEUP_LOOP_START;
animation.loop_end = WAKEUP_LOOP_END;
    } else {
        animation.current_frame = ASLEEP_PRE_START;
        animation.loop_start = ASLEEP_LOOP_START;
        animation.loop_end = ASLEEP_LOOP_END;
    }



    // Password prompt
    bullets = null;
    prompt = null;
    bullet.image = Image.Text("*", 1, 1, 1);


    // fall asleep animation key frames
    ASLEEP_PRE_START = 38;
    ASLEEP_LOOP_START = 76;
    ASLEEP_LOOP_END = 120;

    // wake up animation key frames
    WAKEUP_PRE_START = 0;
    WAKEUP_LOOP_START = 12;
    WAKEUP_LOOP_END = 49;

    // amount of droping refresh calls to slow down the animation
    SKIP_TICKS = 3;

    // populate frames
    animation.frames_total = 0;
    while (1) {
        local.image = Image("animation/frame-" + animation.frames_total + ".png");
        if (!image) break;
        animation.images[animation.frames_total++] = image;
    }

    animation.sprite = Sprite();
    animation.sprite.SetPosition(
        (Window.GetWidth() - animation.images[0].GetWidth()) / 2,
                                 (Window.GetHeight() - animation.images[0].GetHeight()) / 2,
                                 0);

    // some debug sprites, feel free to uncomment and try it
    #animation.frame_counter.sprite = Sprite();
    b_debug.sprite = Sprite();
    #animation.frame_counter.sprite.SetPosition(animation.sprite.GetX(), animation.sprite.GetY(), 10);
    b_debug.sprite.SetPosition(100, 120, 10);

    tick = 0;


    fun hide_animation() {
        animation.sprite.SetOpacity(0);
    }

    fun show_animation() {
        animation.sprite.SetOpacity(1);
    }

    fun animation_callback(){
        if (tick <= SKIP_TICKS) tick++;
        else {
            tick = 0;
            if (animation.current_frame > animation.loop_end) animation.current_frame = animation.loop_start;
            animation.sprite.SetImage(animation.images[animation.current_frame]);
            #animation.frame_counter.sprite.SetImage(Image.Text("frame: " + animation.current_frame, 1,1,1));
            animation.current_frame++;
        }
    }



    Plymouth.SetRefreshFunction(animation_callback);

    // ------------------------------- Message -------------------------------------
    if (mode == "boot") {boot_message.text = "Starting up";}
    else if (mode == "reboot") {boot_message.text = "Rebooting";}
    else if (mode == "shutdown") {boot_message.text = "Shutting down";}
    else {boot_message.text = mode;}

    boot_message.sprite = Sprite();
    boot_message.image = Image.Text(boot_message.text, 1, 1, 1, 1, MAIN_FONT);
    boot_message.sprite.SetImage(boot_message.image);
    boot_message.sprite.SetX(BOOT_MESSAGE.center.x * screen.width - boot_message.image.GetWidth() / 2);
    boot_message.sprite.SetY(BOOT_MESSAGE.center.y * screen.height - boot_message.image.GetHeight() / 2);

    fun hide_boot_message() {
        boot_message.sprite.SetOpacity(0);
    }

    fun show_boot_message() {
        boot_message.sprite.SetOpacity(1);
    }

    // ------------------------------ Progress Bar ---------------------------------

    // Only load progress bar logic in boot sequence
    if (mode == "boot") {
        // Load and set the progress bar background
        bar.background.image = Image("bar-background.png");
        bar.background.sprite = Sprite(bar.background.image);
        bar.background.sprite.SetX(BAR.center.x * screen.width - bar.background.image.GetWidth() / 2);
        bar.background.sprite.SetY(BAR.center.y * screen.height - bar.background.image.GetHeight() / 2);

        // Load the progress bar and display it anchored to the left of the background bar
        bar.image = Image("bar-progress.png");
        bar.sprite = Sprite();
        bar.sprite.SetX(BAR.center.x * screen.width - bar.background.image.GetWidth() / 2);
        bar.sprite.SetY(BAR.center.y * screen.height - bar.background.image.GetHeight() / 2);

        fun hide_boot_progress() {
            bar.sprite.SetOpacity(0);
            bar.background.sprite.SetOpacity(0);
        }

        fun show_boot_progress() {
            bar.sprite.SetOpacity(1);
            bar.background.sprite.SetOpacity(1);
        }

        fun boot_progress_callback(time, progress) {
            // Grow the progress bar size with the current progress percent
            // bar.sprite.SetImage(bar.image.Scale(progress * bar.image.GetWidth(), bar.image.GetHeight()));
            bar.sprite.SetImage(bar.image.Crop(0, 0, progress * bar.image.GetWidth(), bar.image.GetHeight()));
        }

        Plymouth.SetBootProgressFunction(boot_progress_callback);
    }

    // ----------------------------- Status Update ---------------------------------


    status_message.sprite = Sprite();

    fun update_status_callback(status) {
        status_message.image = Image.Text(status, 1, 1, 1, 1, SECONDARY_FONT);

        status_message.sprite.SetImage(status_message.image);
        status_message.sprite.SetX(STATUS.center.x * screen.width - status_message.image.GetWidth() / 2);
        status_message.sprite.SetY(STATUS.center.y * screen.height - status_message.image.GetHeight() / 2);
    }

    fun root_mounted_callback() {
        update_status_callback("Root successfully mounted");
    }

    Plymouth.SetUpdateStatusFunction(update_status_callback);
    Plymouth.SetRootMountedFunction(root_mounted_callback);

    //------------------------------------- Password prompt -------------------------------

    // Only load password prompt logic in boot sequence
    if (mode == "boot") {
        // Load and place the lock icon
        lock.image = Image("lock.png");
        lock.sprite = Sprite(lock.image);
        lock.width = lock.image.GetWidth();
        lock.height = lock.image.GetHeight();
        lock.sprite.SetX(LOCK.center.x * screen.width - lock.width / 2);
        lock.sprite.SetY(LOCK.center.y * screen.height  - lock.height / 2);

        //Initiate the prompt message string
        //We cannot set the possition now as the image will change in size
        password_prompt.sprite = Sprite();

        // Load and place the password prompt
        prompt.image = Image("input.png");
        prompt.sprite = Sprite(prompt.image);
        prompt.sprite.SetX(BAR.center.x * screen.width - prompt.image.GetWidth() / 2);
        prompt.sprite.SetY(BAR.center.y * screen.height - prompt.image.GetHeight() / 2);

        // Initiate the bullet string
        // We cannot set the position now as the image will change in size
        bullets.sprite = Sprite();

        // Make password dialog elements invisible
        fun hide_password_screen() {
            lock.sprite.SetOpacity(0);
            password_prompt.sprite.SetOpacity(0);
            prompt.sprite.SetOpacity(0);
            bullets.sprite.SetOpacity(0);
        }

        // Make password dialog elements visible
        fun show_password_screen() {
            lock.sprite.SetOpacity(1);
            password_prompt.sprite.SetOpacity(1);
            prompt.sprite.SetOpacity(1);
            bullets.sprite.SetOpacity(1);
        }

        fun display_password_callback(prompt, n_bullets) {
            disk_prompt = "Enter the password to unlock the disk";

            // Interrupt the normal flow
            global.flow = "password";
            show_password_screen();
            hide_animation();
            hide_boot_message();
            hide_boot_progress();

            // Create the string of bullets
            bullets.string = "";
            while (n_bullets--) bullets.string += PROMPT.bullet;

            // Display placeholder text when necessary
            if (!bullets.string) bullets.string = PROMPT.placeholder;

            bullets.image = Image.Text(bullets.string, 1, 1, 1, 1, SECONDARY_FONT);
            password_prompt.image = Image.Text(disk_prompt, 1, 1, 1, 1, MAIN_FONT);

            //display prompt
            password_prompt.sprite.SetImage(password_prompt.image);
            password_prompt.sprite.SetX(BOOT_MESSAGE.center.x * screen.width - password_prompt.image.GetWidth() / 2);
            password_prompt.sprite.SetY(BOOT_MESSAGE.center.y * screen.height - password_prompt.image.GetHeight() / 2);

            // Display bullets
            bullets.sprite.SetImage(bullets.image);
            bullets.sprite.SetX(BAR.center.x * screen.width - bullets.image.GetWidth() / 2);
            bullets.sprite.SetY(BAR.center.y * screen.height - bullets.image.GetHeight() / 2);
        }

        Plymouth.SetDisplayPasswordFunction(display_password_callback);

    }

    //--------------------------- Normal display (unset all text) ----------------------
    fun display_normal_callback() {
        global.flow = "run";
        hide_password_screen();
        show_animation();
        show_boot_message();
        show_boot_progress();
    }

    Plymouth.SetDisplayNormalFunction(display_normal_callback);

    #----------------------------------------- Quit --------------------------------
    #
    # Exit the process
    #

    fun quit_callback() {}

    Plymouth.SetQuitFunction(quit_callback);

